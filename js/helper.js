class forComponent {
    static scrName = '<script>';
    static scrEndName = '</script>';

    static startCovertComponent(){
        const components = document.querySelectorAll('component');
        components.forEach((component, index) => {
            const src = component.getAttribute('src');

            const props = component.getAttribute('props');
            if(props) {
                const propsArray = props.replace(/[{,\n}]/g, '').split(';');
                this.getComponent(src, (res) => {
                    this.addScript(res, (HTML) => {
                        let ConvertedHtml = HTML;
                        propsArray.map((_props) => {
                            const objProps = _props.split(':');
                            const key = objProps[0].replace(/ /g, '');
                            const val = objProps[1];
                            const reg = new RegExp(`{{${key}}}`, 'g');
                            ConvertedHtml = ConvertedHtml.replace(reg, val === `''` ? `` : val);
                        })
                        component.outerHTML = `<!---- THIS COMPONENT URL ${src} -->${ConvertedHtml}`;
                    });
                })
            } else {
                this.getComponent(src, (res) => {
                    this.addScript(res, (HTML) => {
                        component.outerHTML = `<!---- THIS COMPONENT URL ${src} -->${HTML}`;
                    });
                })
            }


            if(components.length > 0 && index === components.length - 1){
                this.startCovertComponent();
                this.startConvertFor();
            }
        })
    }

    static addScript(res, calBack){
        if(res.includes(this.scrName)){
            const startIndexOfScript = res.indexOf(this.scrName);
            const endScript = res.indexOf(this.scrEndName);
            const cropString = res.slice(startIndexOfScript + this.scrName.length, endScript);

            const newScript = document.createElement('script');
            newScript.setAttribute('defer', 'true');
            newScript.innerHTML = cropString;
            document.body.appendChild(newScript);

            calBack(res.slice(0, startIndexOfScript));
        } else {
            calBack(res);
        }
    }

    static startConvertFor(){
        const forTag = document.querySelectorAll('for');
        forTag.forEach((item) => {
            let html = item.innerHTML;
            const count = +item.getAttribute('count');
            const data = item.dataset;

            if(count){
                let _html = '';
                for (let i = 0; i < count; i++){
                    let _htm = html;
                    for (let key in data){
                        const keyArr = data[key].split(',');
                        const reg = new RegExp(`{{${key}}}`, 'g');
                        _htm =  _htm.replace(reg, keyArr[i] === `''` ? '' : keyArr[i]);
                    }
                    _html += _htm + '\n';
                }
                item.outerHTML = _html;
            }
        })
    }

    static getComponent(url, callBack){
        const xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", url, false );
        xmlHttp.send( null );
        callBack(xmlHttp.responseText)
    }
}

forComponent.startCovertComponent();
forComponent.startConvertFor();

console.time();
const costs = {
    bgBlur: 'bgBlur-',
    color: 'c-',
    bgc: 'bgc-',
    fw: 'fw-'
}
const allElem = document.querySelectorAll('body *');
const head = document.head;

const sizes = [{sizeName: 'sm', size: 576}, {sizeName: 'md', size: 768}, {sizeName: 'lg', size: 992}, {sizeName: 'xl',size: 1200}, {sizeName: 'xxl', size: 1400}];

const classTypes = [
    {minClass: 'h-', styleName: 'height'},
    {minClass: 'w-', styleName: 'width'},
    // MARGIN
    {minClass: 'me-', styleName: 'margin-right'},
    {minClass: 'ms-', styleName: 'margin-left'},
    {minClass: 'mt-', styleName: 'margin-top'},
    {minClass: 'mb-', styleName: 'margin-bottom'},
    {minClass: 'm-', styleName: 'margin'},
    // PADDING
    {minClass: 'pe-', styleName: 'padding-right'},
    {minClass: 'ps-', styleName: 'padding-left'},
    {minClass: 'pt-', styleName: 'padding-top'},
    {minClass: 'pb-', styleName: 'padding-bottom'},
    {minClass: 'p-', styleName: 'padding'},
    // FONT SIZE
    {minClass: 'fs-', styleName: 'font-size'},
    {minClass: 'br-', styleName: 'border-radius'},
    {minClass: 'lh-', styleName: 'line-height'},
    {minClass: 'ls-', styleName: 'letter-spacing'},
    {minClass: 'left-', styleName: 'left'},
    {minClass: 'top-', styleName: 'top'},
    {minClass: 'right-', styleName: 'right'},
    {minClass: 'bottom-', styleName: 'bottom'},
    {minClass: 'fw-', styleName: 'font-weight'},
    {minClass: costs.color, styleName: 'color'},
    {minClass: costs.bgc, styleName: 'background-color'},
    {minClass: costs.bgBlur, styleName: 'backdrop-filter'},
]

const oldClasses = [];

// CREATING STYLE TAGS
const style = document.createElement('STYLE');
const medias = document.createElement('STYLE');

allElem.forEach((item) => {
    item.classList.forEach((className) => {
        const checkingImportant = chekWork(className);
        const type = classTypes.find((classType) => !className.indexOf( checkingImportant + classType.minClass) && !oldClasses.includes(className));
        if (type) {
            const { checkInp, percent, newClassNem } = {
                checkInp:  className.includes('!') ? '!important' : '',
                percent: className.includes('%') ? '%' : 'rem',
                newClassNem: className.replace(/[!,%]/g, '')
            }
            const classCount = newClassNem.split('-')[1];
            const classCountTwo = newClassNem.split('-')[2];
            if (classCountTwo) {
                sizes.forEach((_size) => {
                    const mediaClassName = `${type.minClass}${_size.sizeName}`;
                    if (newClassNem.includes(mediaClassName) && !oldClasses.includes(className)) {
                        oldClasses.push(newClassNem);
                        medias.innerHTML = `${medias.innerHTML} @media (min-width: ${_size.size}px){.${newClassNem}{${type.styleName}: ${printStyle(type, className, percent, checkInp, classCountTwo)}}}`;
                    }
                })
            } else {
                if (newClassNem.includes(type.minClass) && !oldClasses.includes(className)) {
                    oldClasses.push(newClassNem);
                    style.innerHTML = `${style.innerHTML} .${newClassNem}{${type.styleName}: ${printStyle(type, className, percent, checkInp, classCount)}}`;
                }
            }
        }
    })
    if(String(item.className).includes('!') || String(item.className).includes('%')){
        item.className = item.className.replace(/[!,%]/g, '')
    }
})



function printStyle(type, className, percent, checkInp, classCount){
    const percentOrRem = `${className.includes('%') ? classCount : classCount / 16}${percent} ${checkInp}`;
    switch (type.minClass){
        case costs.fw:
            return classCount;
        case costs.color:
            const _color = colors[classCount];
            !_color && console.error(`color ${classCount} no added const colors `)
            return _color;
        case costs.bgc:
            const _colorBgc = colors[classCount];
            !_colorBgc && console.error(`background color ${classCount} no added const colors `)
            return _colorBgc;
        case costs.bgBlur:
            return `blur(${percentOrRem})`;
        default:
            return `${percentOrRem}`;
    }
}


function chekWork(className){
    return className.includes('!') ? '!' : className.includes('%') ? '%': '';
}


head.appendChild(style);
head.appendChild(medias);

console.timeEnd()



// const svgIcons = [
//     {
//         name: 'invoice',
//         svg: '<svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M3.73884 7.4672H3.25292V8.43904H3.73884V7.4672ZM9.56987 8.43904H10.0558V7.4672H9.56987V8.43904ZM3.73884 9.90166H3.25292V10.3876H3.73884V9.90166ZM9.56987 9.90166V10.3876H10.0558V9.90166H9.56987ZM3.73884 6.0143V5.52838H3.25292V6.0143H3.73884ZM9.56987 6.0143H10.0558V5.52838H9.56987V6.0143ZM12.4854 4.07063H12.9713V3.86946L12.8294 3.7266L12.4854 4.07063ZM9.56987 1.15511L9.9139 0.811078L9.77104 0.669189H9.56987V1.15511ZM3.73884 8.43904H9.56987V7.4672H3.73884V8.43904ZM3.73884 10.3876H9.56987V9.41574H3.73884V10.3876ZM3.73884 6.50022H9.56987V5.52838H3.73884V6.50022ZM11.5136 14.2749H1.79516V15.2468H11.5136V14.2749ZM1.30924 13.789V2.12695H0.337402V13.789H1.30924ZM11.9995 4.07063V13.789H12.9713V4.07063H11.9995ZM1.79516 1.64103H9.56987V0.669189H1.79516V1.64103ZM9.22584 1.49914L12.1414 4.41466L12.8294 3.7266L9.9139 0.811078L9.22584 1.49914ZM1.79516 14.2749C1.66629 14.2749 1.54269 14.2237 1.45156 14.1326C1.36044 14.0415 1.30924 13.9179 1.30924 13.789H0.337402C0.337402 14.1756 0.490987 14.5464 0.76437 14.8198C1.03775 15.0932 1.40854 15.2468 1.79516 15.2468V14.2749ZM11.5136 15.2468C11.9002 15.2468 12.271 15.0932 12.5443 14.8198C12.8177 14.5464 12.9713 14.1756 12.9713 13.789H11.9995C11.9995 13.9179 11.9483 14.0415 11.8571 14.1326C11.766 14.2237 11.6424 14.2749 11.5136 14.2749V15.2468ZM1.30924 2.12695C1.30924 1.99807 1.36044 1.87448 1.45156 1.78335C1.54269 1.69222 1.66629 1.64103 1.79516 1.64103V0.669189C1.40854 0.669189 1.03775 0.822774 0.76437 1.09616C0.490987 1.36954 0.337402 1.74033 0.337402 2.12695H1.30924ZM3.25292 6.0143V9.90166H4.22476V6.0143H3.25292ZM6.16844 6.0143V9.90166H7.14028V6.0143H6.16844ZM9.08395 6.0143V9.90166H10.0558V6.0143H9.08395ZM3.25292 4.55655H6.16844V3.58471H3.25292V4.55655ZM7.14028 12.3313H10.0558V11.3594H7.14028V12.3313Z" fill="#838A90"/> </svg>'
//     },
//     {
//         name: 'country',
//         svg: '<svg class="country-icon" style="position: relative;margin-top: -5px;" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M9.92679 0.800293C14.9685 0.800293 19.0556 4.89008 19.0556 9.93519C19.0556 10.5407 18.9963 11.1334 18.884 11.707C18.6607 11.106 18.2346 10.602 17.6792 10.2822C17.7118 9.55111 17.6411 8.81904 17.4693 8.10766H14.4045C14.4848 8.94535 14.5095 9.78744 14.4784 10.6283C14.1946 10.8848 13.9677 11.198 13.8125 11.5478C13.6573 11.8975 13.5773 12.276 13.5776 12.6586C13.5776 13.1993 13.7346 13.7044 14.0056 14.1291C13.9755 14.2505 13.9436 14.3702 13.9107 14.488C13.5164 14.5092 13.1344 14.6325 12.8019 14.8457C12.4695 15.0589 12.198 15.3549 12.0141 15.7045C12.2414 15.2205 12.4431 14.6615 12.6092 14.0432H7.24437C7.83945 16.2479 8.87445 17.6983 9.9277 17.6983C10.6533 17.6983 11.3716 17.0078 11.942 15.8543C11.8164 16.1423 11.7518 16.4533 11.7522 16.7676C11.7445 17.4672 11.9194 18.1566 12.2596 18.7677C11.5149 18.9641 10.7336 19.0691 9.92679 19.0691C4.88504 19.0691 0.799805 14.9784 0.799805 9.93428C0.798892 4.89008 4.88504 0.800293 9.92679 0.800293ZM5.82695 14.045H3.34258C4.22394 15.4557 5.53334 16.547 7.07917 17.1594C6.60274 16.4105 6.20937 15.4734 5.92004 14.4058L5.82695 14.045ZM5.44909 8.10766H2.38425L2.37969 8.12319C2.23838 8.7168 2.16731 9.32497 2.16794 9.93519C2.16794 10.8996 2.34318 11.823 2.66445 12.6751H5.56044C5.42706 11.7676 5.36117 10.8515 5.3633 9.93428C5.3633 9.30957 5.3925 8.69766 5.45 8.10675L5.44909 8.10766ZM6.82727 8.10766C6.66642 9.62857 6.70755 11.1641 6.94957 12.6742H12.904C13.1463 11.1641 13.1877 9.62861 13.0272 8.10766H6.82635H6.82727ZM7.08008 2.71001L7.05909 2.71732C5.19083 3.4635 3.68366 4.90425 2.85338 6.7377H5.63528C5.92187 5.13759 6.4202 3.74388 7.08008 2.71001ZM9.9277 2.17025L9.82092 2.17482C8.66726 2.28076 7.55103 4.1092 7.03354 6.7377H12.8219C12.3053 4.11651 11.1945 2.29081 10.0427 2.17573L9.92679 2.17116L9.9277 2.17025ZM12.7753 2.7091L12.8721 2.86893C13.4836 3.88453 13.9463 5.21796 14.2183 6.73861H17.0002C16.2078 4.98879 14.7975 3.59348 13.04 2.82052L12.7753 2.71001V2.7091ZM18.5974 15.4004C18.9605 15.4004 19.3087 15.5447 19.5655 15.8016C19.8222 16.0585 19.9665 16.407 19.9665 16.7703C19.9665 17.7896 19.5475 18.6061 18.8603 19.1577C18.184 19.7011 17.2768 19.9669 16.3157 19.9669C15.3546 19.9669 14.4474 19.7021 13.7711 19.1577C13.5315 18.9663 13.3233 18.7386 13.1541 18.4828C12.8419 18.0088 12.6649 17.4325 12.6649 16.7703C12.6649 16.407 12.8091 16.0585 13.0659 15.8016C13.3226 15.5447 13.6708 15.4004 14.0339 15.4004H18.5974ZM18.1411 12.6605C18.1429 13.1449 17.9523 13.6102 17.6113 13.9541C17.2702 14.2979 16.8066 14.4921 16.3225 14.4939C15.8384 14.4957 15.3734 14.305 15.0298 13.9638C14.6862 13.6225 14.4921 13.1586 14.4903 12.6742V12.6586C14.4903 12.1742 14.6826 11.7096 15.0249 11.367C15.3673 11.0245 15.8316 10.832 16.3157 10.832C16.7998 10.832 17.2641 11.0245 17.6064 11.367C17.9488 11.7096 18.1411 12.1742 18.1411 12.6586V12.6605Z" /> </svg>'
//     },
//     {
//         name: 'payment-request',
//         svg: '<svg width="12" height="15" viewBox="0 0 12 15" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M5.18101 0.305298C4.37279 0.305298 3.70705 0.971035 3.70705 1.77925V7.06093L3.33856 6.96856C3.26192 6.86882 3.229 6.80544 3.03149 6.66198C2.71705 6.43106 2.22917 6.20112 1.57276 6.20112C0.872144 6.20112 0.267822 6.83492 0.267822 7.62889V7.82886L0.405883 7.98215L3.70705 11.3138V14.0622H11.5682V5.78645C11.5682 5.09369 11.0788 4.48937 10.4013 4.34345L6.65496 3.52982V1.77925C6.65496 0.971035 5.98923 0.305298 5.18101 0.305298ZM5.18101 1.28794C5.45909 1.28794 5.67233 1.50117 5.67233 1.77925V4.32821L6.05605 4.42009L10.2018 5.29513C10.4317 5.34524 10.5855 5.55258 10.5855 5.78645V10.623H4.39785L1.29664 7.4756C1.33693 7.26827 1.42144 7.18376 1.57276 7.18376C2.01643 7.18376 2.29058 7.31789 2.46353 7.44465C2.63598 7.57141 2.67823 7.65985 2.67823 7.65985L2.7706 7.82837L2.97007 7.88978L4.07554 8.18163L4.68969 8.33541V1.77925C4.68969 1.50117 4.90292 1.28794 5.18101 1.28794ZM4.68969 11.6056H10.5855V13.0796H4.68969V11.6056Z" fill="#838A90"/> </svg>'
//     },
//     {
//         name: 'payroll',
//         svg: '<svg width="19" height="17" viewBox="0 0 19 17" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M11.4215 2.26183C11.4215 1.9104 11.315 1.56255 11.1167 1.2685C10.9184 0.974445 10.6394 0.74494 10.3089 0.608671C9.98206 0.475988 9.61853 0.443714 9.26601 0.511848C8.91717 0.583569 8.59403 0.755698 8.34433 1.00672C8.15338 1.19319 8.01017 1.41911 7.91837 1.66655C7.82657 1.91398 7.79352 2.17935 7.81923 2.44471C7.84493 2.70649 7.92939 2.9611 8.06892 3.18702C8.20846 3.41294 8.39207 3.60658 8.61606 3.75361C8.86209 3.91498 9.14484 4.01539 9.4386 4.04408C9.73237 4.07277 10.0298 4.02973 10.3052 3.91857C10.5255 3.82533 10.7238 3.69265 10.8891 3.52052C11.2306 3.18702 11.4215 2.73159 11.4215 2.26183Z" fill="#838A90"/> <path d="M5.65967 5.09863L8.87271 10.6068C9.27664 11.3132 9.95964 11.3132 10.3672 10.6068L11.7773 8.18261C9.76869 8.66672 6.798 7.04943 5.65967 5.09863Z" fill="#838A90"/> <path d="M13.9859 2.26184C13.2992 2.26184 12.462 2.87146 12.1242 3.61736C12.1242 3.61736 11.342 5.3494 9.61984 5.3494C9.02864 5.3494 8.4558 5.13783 8.00781 4.75412C8.57331 5.43188 10.5011 6.89856 13.3506 5.48926L14.4816 3.55281C14.8966 2.83919 14.6689 2.26184 13.9859 2.26184Z" fill="#838A90"/> <path d="M8.00703 4.75083C7.63615 4.43526 7.33137 4.04797 7.11839 3.61406C6.78056 2.86817 5.94333 2.25854 5.26033 2.25854C4.56998 2.26213 4.34599 2.83948 4.76093 3.54951L5.66058 5.09509C6.79892 7.04588 9.76961 8.66677 11.7856 8.17907L13.3535 5.48955C10.4967 6.89886 8.57252 5.43217 8.00703 4.75083Z" fill="#838A90"/> <path d="M11.5864 10.823C11.5713 10.9921 11.5554 11.1608 11.5404 11.3299C13.1237 11.5498 14.2975 12.0486 14.4301 12.6658C14.6277 13.5836 11.575 13.9965 9.60854 13.9772C7.64205 13.9577 4.64561 13.5836 4.90756 12.6656C5.07948 12.0632 6.23625 11.5743 7.77824 11.3466C7.76285 11.177 7.74534 11.0074 7.73048 10.838C5.74843 11.053 4.09712 11.5823 3.43738 12.2723H1.20504L0.810791 13.0765H3.13952C3.32047 14.0228 5.33755 14.8396 8.22184 15.0459L8.12314 16.1994H10.9779L10.9492 15.0461C13.8482 14.8396 15.9224 14.0228 16.1695 13.0765H18.4983L18.1604 12.2723H15.9281C15.3014 11.5649 13.6202 11.0269 11.5864 10.823Z" fill="#838A90"/> </svg>'
//     },
//     {
//         name: 'withdrawal',
//         svg: '<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M16.2267 17.4409L23.4666 10.2011L22.453 9.18752L16.2267 15.4138L10.0005 9.18752L8.9869 10.2011L16.2267 17.4409Z" fill="#838A90"/> <path d="M24.9143 21.7848L7.53873 21.7848L7.53873 20.3368L24.9143 20.3368L24.9143 21.7848Z" fill="#838A90"/> </svg>'
//     },
//     {
//         name: 'union',
//         svg: '<svg width="39" height="36" viewBox="0 0 39 36" fill="none" xmlns="http://www.w3.org/2000/svg"> <path fill-rule="evenodd" clip-rule="evenodd" d="M35.6101 14.6048H36.8619C37.1939 14.6048 37.5123 14.7361 37.7471 14.9698C37.9819 15.2035 38.1138 15.5205 38.1138 15.8511V25.8213C38.1138 26.1518 37.9819 26.4688 37.7471 26.7025C37.5123 26.9362 37.1939 27.0675 36.8619 27.0675H35.6101V34.5452C35.6101 34.8757 35.4782 35.1927 35.2435 35.4264C35.0087 35.6601 34.6903 35.7915 34.3583 35.7915H5.72932C5.05531 35.7964 4.38693 35.6691 3.76234 35.4168C3.13775 35.1646 2.56918 34.7923 2.0891 34.3213C1.60901 33.8503 1.22682 33.2898 0.964343 32.6717C0.701864 32.0536 0.564238 31.3901 0.559324 30.7191V5.08324C0.550538 4.93381 0.550538 4.784 0.559324 4.63458C0.559324 3.64298 0.954986 2.69199 1.65927 1.99083C2.36355 1.28966 3.31876 0.895752 4.31477 0.895752H33.8325C34.1645 0.895752 34.483 1.02706 34.7177 1.26078C34.9525 1.4945 35.0844 1.81149 35.0844 2.14203C35.0844 2.47256 34.9525 2.78955 34.7177 3.02328C34.483 3.257 34.1645 3.3883 33.8325 3.3883H4.31477C4.01835 3.38349 3.72984 3.48356 3.5006 3.67071C3.27136 3.85785 3.11628 4.11992 3.06295 4.41025V4.85891C3.11628 5.14924 3.27136 5.4113 3.5006 5.59845C3.72984 5.78559 4.01835 5.88567 4.31477 5.88085H34.3583C34.6903 5.88085 35.0087 6.01216 35.2435 6.24588C35.4782 6.4796 35.6101 6.79659 35.6101 7.12713V14.6048ZM5.72932 33.2989H33.1065V27.0675H24.3438C22.6838 27.0675 21.0918 26.411 19.918 25.2424C18.7442 24.0738 18.0847 22.4888 18.0847 20.8362C18.0847 19.1835 18.7442 17.5985 19.918 16.4299C21.0918 15.2613 22.6838 14.6048 24.3438 14.6048H33.1065V8.3734H4.31477C3.89211 8.3916 3.46929 8.34108 3.06295 8.22385V30.7191C3.07612 31.4122 3.36364 32.0721 3.86298 32.5552C4.36231 33.0383 5.03306 33.3056 5.72932 33.2989ZM24.3438 24.575H35.6101V17.0973H24.3438C23.3478 17.0973 22.3926 17.4912 21.6883 18.1924C20.984 18.8936 20.5884 19.8446 20.5884 20.8362C20.5884 21.8277 20.984 22.7787 21.6883 23.4799C22.3926 24.1811 23.3478 24.575 24.3438 24.575ZM27.4845 20.8356C27.4845 21.8681 26.6438 22.705 25.6068 22.705C24.5697 22.705 23.7291 21.8681 23.7291 20.8356C23.7291 19.8032 24.5697 18.9662 25.6068 18.9662C26.6438 18.9662 27.4845 19.8032 27.4845 20.8356Z" fill="#5152FB"/></svg>'
//     },
//     {
//         name: 'calendar',
//         svg: '<svg width="30" height="35" viewBox="0 0 30 35" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.2606 15.9545H7.12812V18.2194H8.2606V15.9545ZM21.8503 18.2194H22.9828V15.9545H21.8503V18.2194ZM8.2606 21.6282H7.12812V22.7607H8.2606V21.6282ZM21.8503 21.6282V22.7607H22.9828V21.6282H21.8503ZM8.2606 12.5683V11.4359H7.12812V12.5683H8.2606ZM21.8503 12.5683H22.9828V11.4359H21.8503V12.5683ZM28.6452 8.03843H29.7777V7.56959L29.447 7.23664L28.6452 8.03843ZM21.8503 1.24356L22.6521 0.441768L22.3192 0.111084H21.8503V1.24356ZM8.2606 18.2194H21.8503V15.9545H8.2606V18.2194ZM8.2606 22.7607H21.8503V20.4957H8.2606V22.7607ZM8.2606 13.7008H21.8503V11.4359H8.2606V13.7008ZM26.3803 31.8205H3.73069V34.0854H26.3803V31.8205ZM2.59821 30.688V3.50852H0.333252V30.688H2.59821ZM27.5127 8.03843V30.688H29.7777V8.03843H27.5127ZM3.73069 2.37604H21.8503V0.111084H3.73069V2.37604ZM21.0485 2.04536L27.8434 8.84023L29.447 7.23664L22.6521 0.441768L21.0485 2.04536ZM3.73069 31.8205C3.43034 31.8205 3.14229 31.7012 2.9299 31.4888C2.71752 31.2764 2.59821 30.9884 2.59821 30.688H0.333252C0.333252 31.5891 0.691195 32.4532 1.32834 33.0904C1.96548 33.7275 2.82963 34.0854 3.73069 34.0854V31.8205ZM26.3803 34.0854C27.2813 34.0854 28.1455 33.7275 28.7826 33.0904C29.4198 32.4532 29.7777 31.5891 29.7777 30.688H27.5127C27.5127 30.9884 27.3934 31.2764 27.181 31.4888C26.9687 31.7012 26.6806 31.8205 26.3803 31.8205V34.0854ZM2.59821 3.50852C2.59821 3.20817 2.71752 2.92012 2.9299 2.70774C3.14229 2.49536 3.43034 2.37604 3.73069 2.37604V0.111084C2.82963 0.111084 1.96548 0.469027 1.32834 1.10617C0.691195 1.74331 0.333252 2.60746 0.333252 3.50852H2.59821ZM7.12812 12.5683V21.6282H9.39308V12.5683H7.12812ZM13.923 12.5683V21.6282H16.188V12.5683H13.923ZM20.7179 12.5683V21.6282H22.9828V12.5683H20.7179ZM7.12812 9.17091H13.923V6.90596H7.12812V9.17091ZM16.188 27.2906H22.9828V25.0256H16.188V27.2906Z" fill="#5152FB"/></svg>'
//     },
//     {
//         name: 'native-loc',
//         svg: '<svg width="26" height="22" viewBox="0 0 26 22" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M15.7798 14.4507C15.7591 14.6867 15.7373 14.9222 15.7166 15.1581C17.89 15.465 19.5011 16.1613 19.6831 17.0227C19.9543 18.3036 15.7642 18.8799 13.065 18.853C10.3658 18.8258 6.25292 18.3036 6.61248 17.0224C6.84846 16.1817 8.43622 15.4992 10.5528 15.1814C10.5316 14.9447 10.5076 14.708 10.4872 14.4716C7.76664 14.7716 5.50007 15.5104 4.59451 16.4735H1.53041L0.989258 17.5959H4.18567C4.43403 18.9166 7.20267 20.0567 11.1616 20.3446L11.0262 21.9545H14.9446L14.9053 20.3448C18.8844 20.0567 21.7315 18.9166 22.0706 17.5959H25.267L24.8033 16.4735H21.7392C20.8791 15.4861 18.5715 14.7352 15.7798 14.4507Z" fill="#5152FB"/> <path d="M15.531 2.53842C15.531 2.04076 15.3848 1.54819 15.1125 1.1318C14.8403 0.7154 14.4572 0.390401 14.0035 0.197437C13.5549 0.00955254 13.0558 -0.0361489 12.5719 0.0603331C12.093 0.161894 11.6494 0.405638 11.3066 0.761101C11.0445 1.02516 10.8479 1.34507 10.7219 1.69546C10.5958 2.04584 10.5505 2.42162 10.5858 2.79739C10.621 3.16809 10.737 3.52863 10.9285 3.84854C11.1201 4.16846 11.3721 4.44268 11.6796 4.65087C12.0174 4.87939 12.4055 5.02157 12.8088 5.06219C13.2121 5.10282 13.6204 5.04189 13.9985 4.88447C14.3009 4.75243 14.5732 4.56455 14.8 4.3208C15.2688 3.84854 15.531 3.20363 15.531 2.53842Z" fill="#5152FB"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M10.8429 6.06293C10.3338 5.61606 9.91541 5.06763 9.62303 4.45319C9.15926 3.39696 8.00992 2.53369 7.07231 2.53369C6.1246 2.53877 5.8171 3.35634 6.38673 4.36179L7.62177 6.55042C7.6555 6.61005 7.69041 6.66947 7.72645 6.72865L7.76783 6.80126C7.71688 6.71983 7.66807 6.6379 7.6215 6.55557L12.0323 14.3554C12.5868 15.3558 13.5245 15.3558 14.084 14.3554L14.2122 14.1282L14.234 14.1298L18.7978 6.01637L18.796 6.017L19.7304 4.36681C20.3001 3.35629 19.9875 2.53872 19.0499 2.53872C18.1072 2.53872 16.9578 3.40199 16.4941 4.45821C16.4941 4.45821 15.4204 6.9109 13.0562 6.9109C12.2504 6.9109 11.4696 6.61563 10.8566 6.07971C10.852 6.07408 10.8474 6.06848 10.8429 6.06293Z" fill="#5152FB"/> </svg>'
//     },
//     {
//         name: 'native-loc',
//         svg: '<svg width="26" height="22" viewBox="0 0 26 22" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M15.7798 14.4507C15.7591 14.6867 15.7373 14.9222 15.7166 15.1581C17.89 15.465 19.5011 16.1613 19.6831 17.0227C19.9543 18.3036 15.7642 18.8799 13.065 18.853C10.3658 18.8258 6.25292 18.3036 6.61248 17.0224C6.84846 16.1817 8.43622 15.4992 10.5528 15.1814C10.5316 14.9447 10.5076 14.708 10.4872 14.4716C7.76664 14.7716 5.50007 15.5104 4.59451 16.4735H1.53041L0.989258 17.5959H4.18567C4.43403 18.9166 7.20267 20.0567 11.1616 20.3446L11.0262 21.9545H14.9446L14.9053 20.3448C18.8844 20.0567 21.7315 18.9166 22.0706 17.5959H25.267L24.8033 16.4735H21.7392C20.8791 15.4861 18.5715 14.7352 15.7798 14.4507Z" fill="#5152FB"/> <path d="M15.531 2.53842C15.531 2.04076 15.3848 1.54819 15.1125 1.1318C14.8403 0.7154 14.4572 0.390401 14.0035 0.197437C13.5549 0.00955254 13.0558 -0.0361489 12.5719 0.0603331C12.093 0.161894 11.6494 0.405638 11.3066 0.761101C11.0445 1.02516 10.8479 1.34507 10.7219 1.69546C10.5958 2.04584 10.5505 2.42162 10.5858 2.79739C10.621 3.16809 10.737 3.52863 10.9285 3.84854C11.1201 4.16846 11.3721 4.44268 11.6796 4.65087C12.0174 4.87939 12.4055 5.02157 12.8088 5.06219C13.2121 5.10282 13.6204 5.04189 13.9985 4.88447C14.3009 4.75243 14.5732 4.56455 14.8 4.3208C15.2688 3.84854 15.531 3.20363 15.531 2.53842Z" fill="#5152FB"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M10.8429 6.06293C10.3338 5.61606 9.91541 5.06763 9.62303 4.45319C9.15926 3.39696 8.00992 2.53369 7.07231 2.53369C6.1246 2.53877 5.8171 3.35634 6.38673 4.36179L7.62177 6.55042C7.6555 6.61005 7.69041 6.66947 7.72645 6.72865L7.76783 6.80126C7.71688 6.71983 7.66807 6.6379 7.6215 6.55557L12.0323 14.3554C12.5868 15.3558 13.5245 15.3558 14.084 14.3554L14.2122 14.1282L14.234 14.1298L18.7978 6.01637L18.796 6.017L19.7304 4.36681C20.3001 3.35629 19.9875 2.53872 19.0499 2.53872C18.1072 2.53872 16.9578 3.40199 16.4941 4.45821C16.4941 4.45821 15.4204 6.9109 13.0562 6.9109C12.2504 6.9109 11.4696 6.61563 10.8566 6.07971C10.852 6.07408 10.8474 6.06848 10.8429 6.06293Z" fill="#5152FB"/> </svg>'
//     },
//     {
//         name: 'card',
//         svg: '<svg width="44" height="31" viewBox="0 0 44 31" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M30.0001 21C29.5758 21 29.1688 21.1686 28.8688 21.4686C28.5687 21.7687 28.4001 22.1757 28.4001 22.6C28.4001 23.0243 28.5687 23.4313 28.8688 23.7314C29.1688 24.0314 29.5758 24.2 30.0001 24.2H35.3335C35.7578 24.2 36.1648 24.0314 36.4649 23.7314C36.7649 23.4313 36.9335 23.0243 36.9335 22.6C36.9335 22.1757 36.7649 21.7687 36.4649 21.4686C36.1648 21.1686 35.7578 21 35.3335 21H30.0001Z" fill="#5152FB"/> <path d="M6.53341 0.733398C4.97748 0.733398 3.48527 1.35149 2.38505 2.4517C1.28484 3.55192 0.666748 5.04413 0.666748 6.60007V24.7334C0.666748 26.2893 1.28484 27.7815 2.38505 28.8818C3.48527 29.982 4.97748 30.6001 6.53341 30.6001H37.4667C39.0227 30.6001 40.5149 29.982 41.6151 28.8818C42.7153 27.7815 43.3334 26.2893 43.3334 24.7334V6.60007C43.3334 5.04413 42.7153 3.55192 41.6151 2.4517C40.5149 1.35149 39.0227 0.733398 37.4667 0.733398H6.53341ZM3.86675 24.7334V13.5334H40.1334V24.7334C40.1334 26.2054 38.9387 27.4001 37.4667 27.4001H6.53341C5.06141 27.4001 3.86675 26.2054 3.86675 24.7334ZM3.86675 10.3334V6.60007C3.86675 5.12807 5.06141 3.9334 6.53341 3.9334H37.4667C38.9387 3.9334 40.1334 5.12807 40.1334 6.60007V10.3334H3.86675Z" fill="#5152FB"/> </svg>'
//     }
// ];
//
// const iconsElems = document.querySelectorAll('.svgIcon');
//
// iconsElems.forEach((item) => {
//     const name = item.dataset.name;
//     const className = item.classList;
//     if(name){
//         const findSvg = svgIcons.find((_ic) => _ic.name === name);
//         const oldClass = $(findSvg.svg).attr('class');
//
//         const html = $(findSvg.svg).attr('class', `${oldClass ? oldClass : '' } ${className}`).get(0);
//
//         item.outerHTML = html.outerHTML;
//     }
// })
